{"version":3,"sources":["components/renderdata.js","App.js","reportWebVitals.js","index.js"],"names":["Displaypopup","className","this","props","text","date","href","target","alt","onClick","closePopup","React","Component","Renderdata","state","data","showPopup","name","closepopup","setState","tooglepopup","e","feature","properties","PopupInfo","Name","onEachFeature","layer","on","click","bind","GeoJSON","attribution","features","DefaultIcon","L","icon","iconUrl","shadowUrl","iconShadow","Marker","prototype","options","Map","position","MapContainer","center","zoom","scrollWheelZoom","TileLayer","url","opacity","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"0wbAMMA,E,4JACF,WACI,OACI,qBAAKC,UAAU,QAAf,SACI,sBAAKA,UAAU,cAAf,UACI,2CAAcC,KAAKC,MAAMC,QACzB,oBAAGH,UAAU,OAAb,cAAqB,8CAArB,IAAgDC,KAAKC,MAAME,KAA3D,OACA,oBAAGJ,UAAU,OAAb,cAAqB,wDAArB,4BACA,oBAAGA,UAAU,OAAb,cAAqB,0DAArB,KAA4D,mBAAGK,KAAK,8CAA8CC,OAAO,QAAQC,IAAI,4BAAzE,mCAG5D,wBAAQP,UAAU,SAASQ,QAASP,KAAKC,MAAMO,WAA/C,6B,GAXOC,IAAMC,WAqBZC,E,4MACjBC,MAAQ,CACJC,KAAMA,EACNC,WAAW,EACXC,KAAM,GACNZ,KAAM,I,EAIVa,WAAa,WACT,EAAKC,SAAS,CACVH,WAAY,EAAKF,MAAME,a,EAI/BI,YAAc,SAACC,GACX,EAAKF,SAAS,CACVH,WAAY,EAAKF,MAAME,UACvBC,KAAMI,EAAEd,OAAOe,QAAQC,WAAWC,UAClCnB,KAAMgB,EAAEd,OAAOe,QAAQC,WAAWE,Q,EAI1CC,cAAgB,SAACJ,EAASK,GAKtBA,EAAMC,GAAG,CACLC,MAAO,EAAKT,e,4CAcpB,WACI,OAEI,gCAEQlB,KAAKY,MAAME,UACP,cAAC,EAAD,CACIZ,KAAMF,KAAKY,MAAMG,KACjBZ,KAAMH,KAAKY,MAAMT,KACjBK,WAAYR,KAAKgB,WAAWY,KAAK5B,QAGnC,KAEV,cAAC6B,EAAA,EAAD,CAASC,YAAY,wBACjBjB,KAAMA,EAAKkB,SACXP,cAAexB,KAAKwB,uB,GA3DAf,IAAMC,W,gCCb1CsB,EAAcC,IAAEC,KAAK,CACvBC,QAASD,IACTE,UAAWC,MAIbJ,IAAEK,OAAOC,UAAUC,QAAQN,KAAOF,EAM3B,IAAMS,EAAb,4MAGEC,SAAW,CAAC,GAAI,IAHlB,4CAOE,WACE,OAAQ,gCACN,sBAAK3C,UAAU,UAAf,UACE,oFAEA,oBAAGA,UAAU,OAAb,kZAKA,uBACE,uBANF,sNAQoG,mBAAGK,KAAK,2CACxGC,OAAO,QAAQC,IAAI,YAD6E,yBARpG,qIAWA,uBACE,uBAZF,2FAcqF,mBAAGF,KAAK,8CAA8CC,OAAO,QAC9IC,IAAI,4BAD6E,6BAQvF,eAACqC,EAAA,EAAD,CAAcC,OAAQ5C,KAAK0C,SAAUG,KAAM,EAAGC,iBAAiB,EAA/D,UACE,cAACC,EAAA,EAAD,CACEjB,YAAY,yEACZkB,IAAI,sDAAsDC,QAAS,KAErE,cAAC,EAAD,cAvCR,GAAyBxC,IAAMC,WCdhBwC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCEdQ,IAASC,OAEP,cAAC,EAAD,IAEAC,SAASC,eAAe,SAQ1BZ,M","file":"static/js/main.f2aca660.chunk.js","sourcesContent":["import React from 'react';\r\nimport data from '../data/data.json';\r\nimport { GeoJSON } from 'react-leaflet';\r\nimport \"leaflet/dist/leaflet.css\";\r\n\r\n\r\nclass Displaypopup extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className='popup' >\r\n                <div className='popup_inner'>\r\n                    <h1> Nombre: {this.props.text}</h1>\r\n                    <p className='card'> <strong> Fecha: </strong> {this.props.date} </p>\r\n                    <p className='card'> <strong> Fuente primaria: </strong> En verificación...</p>\r\n                    <p className='card'> <strong> Fuente secundaria: </strong>  <a href='https://twitter.com/vidasilenciadas?lang=en' target='blank' alt='twitter vidas silenciadas'>Vidas silenciadas </a></p>\r\n\r\n\r\n                    <button className='cerrar' onClick={this.props.closePopup}>Cerrar</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default class Renderdata extends React.Component {\r\n    state = {\r\n        data: data,\r\n        showPopup: false,\r\n        name: '',\r\n        date: ''\r\n\r\n    }\r\n\r\n    closepopup = () => {\r\n        this.setState({\r\n            showPopup: !this.state.showPopup\r\n        })\r\n    }\r\n\r\n    tooglepopup = (e) => {\r\n        this.setState({\r\n            showPopup: !this.state.showPopup,\r\n            name: e.target.feature.properties.PopupInfo,\r\n            date: e.target.feature.properties.Name\r\n        });\r\n    }\r\n\r\n    onEachFeature = (feature, layer) => {\r\n        /*  const Name = feature.properties.PopupInfo;\r\n         const date = feature.properties.Name  */\r\n\r\n\r\n        layer.on({\r\n            click: this.tooglepopup\r\n        })\r\n        /* layer.bindPopup(\r\n    \r\n            \"<p> <strong> Nombre: </strong>\" + Name + \"</p>\" +\r\n            \"<p> <strong> Fecha: </strong>\" + date + \"</p>\" +\r\n            \"<p> <strong> Fuente primaria: </strong> En verificación </p>\" +\r\n            \"<p> <strong> Fuente secundaria: </strong>\" +\r\n            \" <a href='https://twitter.com/vidasilenciadas?lang=en' target= blank> Vidas silenciadas </a>\", \"</p>\"\r\n        ); */\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div>\r\n                {\r\n                    this.state.showPopup ?\r\n                        <Displaypopup\r\n                            text={this.state.name}\r\n                            date={this.state.date}\r\n                            closePopup={this.closepopup.bind(this)}\r\n\r\n                        />\r\n                        : null\r\n                }\r\n                <GeoJSON attribution=\"Vidas silenciadas.org\"\r\n                    data={data.features}\r\n                    onEachFeature={this.onEachFeature}\r\n                >\r\n\r\n                </GeoJSON>\r\n\r\n            </div>\r\n\r\n\r\n\r\n\r\n        )\r\n\r\n    }\r\n}\r\n//console.log(this.state.data.features[0].properties.PopupInfo)\r\n\r\n//<Marker position={[0, 0]} icon={this.icon} />\r\n/*                 {features.map(feature => (\r\n                    <Popup ><pre key={feature.id}>{feature.properties.PopupInfo}</pre></Popup>\r\n\r\n                ))} */\r\n\r\n/*  */","import './App.css';\nimport React from 'react';\nimport { MapContainer, TileLayer } from 'react-leaflet'\nimport Renderdata from './components/renderdata';\nimport data from './data/data.json';\nimport { GeoJSON } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport icon from 'leaflet/dist/images/marker-icon.png';\nimport iconShadow from 'leaflet/dist/images/marker-shadow.png';\n\n\n\n\nlet DefaultIcon = L.icon({\n  iconUrl: icon,\n  shadowUrl: iconShadow\n});\n\n\nL.Marker.prototype.options.icon = DefaultIcon;\n\n//Import components\n\n\n\nexport class Map extends React.Component {\n\n\n  position = [4, -74]\n\n\n\n  render() {\n    return (<div>\n      <div className='leftdiv'>\n        <h1>Víctimas relacionadas con el ESMAD en Colombia </h1>\n\n        <p className='text'> Bienvenido/a!\n        En este proyecto, se despliegan los casos de personas asesinadas en las que el Escuadrón\n        Movil Antidisturbios (ESMAD) ha tenido participación (presunta o confirmada). Todos los datos\n        presentados en este geovisor se extraen de la base de datos de Vidas Silenciadas.org, todos los datos\n        fueron levantados por ese equipo de trabajo y en este proyecto solo se visibilizan.\n        <br />\n          <br />\n        Desafortunadamente, estos datos se descargaron en 2019, cuando aún se tenia acceso a la base de datos\n        mencionada, razón por la cual los hechos de los años 2020 y 2021, faltando incluso casos como el de <a href='https://es.wikipedia.org/wiki/Dilan_Cruz'\n            target='blank' alt='wikipedia'>Dilan Cruz </a>, no obstante, todos los datos se encuentran en actualización con el fin de añadir las fuentes relacionadas\n        a cada registro.\n        <br />\n          <br />\n\n        Si deseas conocer más del proyecto de vidas silenciadas, puedes revisar su cuenta de <a href='https://twitter.com/vidasilenciadas?lang=en' target='blank'\n            alt='twitter vidas silenciadas'> twitter.</a>\n\n        </p>\n\n\n      </div>\n\n      <MapContainer center={this.position} zoom={6} scrollWheelZoom={true}  >\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png\" opacity={0.3}\n        />\n        <Renderdata />\n\n      </MapContainer>\n\n    </div>\n\n\n    )\n  }\n}\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Map, Displaypopup } from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\n\n\nReactDOM.render(\n\n  <Map />\n  ,\n  document.getElementById('root')\n);\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}